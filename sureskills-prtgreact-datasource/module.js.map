{"version":3,"file":"module.js","mappings":"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","sources":["webpack://sureskills-prtgreact-datasource/external amd \"@grafana/data\"","webpack://sureskills-prtgreact-datasource/external amd \"@grafana/runtime\"","webpack://sureskills-prtgreact-datasource/external amd \"@grafana/ui\"","webpack://sureskills-prtgreact-datasource/external amd \"lodash\"","webpack://sureskills-prtgreact-datasource/external amd \"react\"","webpack://sureskills-prtgreact-datasource/external amd \"rxjs\"","webpack://sureskills-prtgreact-datasource/webpack/bootstrap","webpack://sureskills-prtgreact-datasource/webpack/runtime/compat get default export","webpack://sureskills-prtgreact-datasource/webpack/runtime/define property getters","webpack://sureskills-prtgreact-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://sureskills-prtgreact-datasource/webpack/runtime/make namespace object","webpack://sureskills-prtgreact-datasource/./constants.ts","webpack://sureskills-prtgreact-datasource/./utils.ts","webpack://sureskills-prtgreact-datasource/./datasource.ts","webpack://sureskills-prtgreact-datasource/./components/QueryEditor.tsx","webpack://sureskills-prtgreact-datasource/./module.ts","webpack://sureskills-prtgreact-datasource/./components/ConfigEditor.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const SENSOR_DATA_MAPPINGS = { 'Message': 'lastmessage', 'Status': 'statustext', 'Status (Raw)': 'statusid' };","/**\n * Global helper functions\n * \n * mostly copied from https://github.com/neuralfraud/grafana-prtg & alexanderzobnin-zabbix-app - thanks!\n */\n\n\n/**\n * pad date parts and optionally add one\n */\nexport function pad(idx: number, val: boolean): string {\n  if (val) return (\"0\" + (idx + 1)).slice(-2);\n  return (\"0\" + idx).slice(-2);\n} ","// 1) Imports\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  MutableDataFrame,\n  FieldType,\n} from '@grafana/data';\n\nimport { MyQuery, MyDataSourceOptions } from './types';\nimport { SENSOR_DATA_MAPPINGS } from './constants';\n\nimport _ from 'lodash';\nimport { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { lastValueFrom, from } from 'rxjs';\nimport * as utils from \"./utils\";\n// import defaults from 'lodash/defaults';\n\n// 2) Functions\n\nconst convertPRTGDateTimeToISO = (date_string) => {\n  // dateString = '24/01/2024 15:17:42';\n  const [full_date, time] = date_string.split(' ');\n  const [date, month, year] = full_date.split('/');\n  const [hour, minute, second] = time.split(':');\n  return `${year}-${month}-${date}T${hour}:${minute}:${second}.000Z`\n};\n\nconst getRefreshTime = (cache_timeout) => {\n  return Date.now() - (cache_timeout * 60000)\n};\n\nconst getAverage = (duration) => {\n  // duration is in milliseconds\n  let avg:string = 0\n  const hours = duration / 3600000;\n  if (hours > 12 && hours < 36) {\n    avg = '300'\n  } else if (hours > 36 && hours < 745) {\n    avg = '3600'\n  } else if (hours > 745) {\n    avg = '86400'\n  }\n  return avg\n};\n\nconst getPRTGDate = (unixtime) => {\n  const dt = new Date(unixtime);\n  const str = [\n    dt.getFullYear(),\n    utils.pad(dt.getMonth(), true),\n    utils.pad(dt.getDate()),\n    utils.pad(dt.getHours()),\n    utils.pad(dt.getMinutes()),\n    utils.pad(dt.getSeconds())\n  ];\n  return str.join(\"-\");\n}\n\n// 3) Datasource\n\nexport class DataSource extends DataSourceApi<MyQuery, MyDataSourceOptions> {\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n    super(instanceSettings);\n    \n    this.base_url = instanceSettings.jsonData.path || '';\n    this.cache_timeout = instanceSettings.jsonData.cache || 5;\n    this.api_token = instanceSettings.jsonData.api_token || '';\n    this.cache = {}\n  }\n\n  async query(options: DataQueryRequest<MyQuery>): Promise<DataQueryResponse> {\n\n    const promises = options.targets.map(async (target) => {\n      let datetime = new Date().toISOString();\n      let refresh_time = getRefreshTime(this.cache_timeout)\n      let error_message = 'API Error: '\n\n      if (target.chart_type === undefined) {\n        return new MutableDataFrame({\n          refId: target.refId,\n          fields: [\n            { name: 'Time', values: [datetime], type: FieldType.time },\n            { name: 'Value', values: [0], type: FieldType.number },\n          ],\n        });\n      } else if (target.chart_type === 'Time series') {\n        let dates_array:string[]  = []\n        let results_array:number[]  = []\n        const { range } = options;\n        const from = range!.from.valueOf();\n        const to = range!.to.valueOf();\n        const duration = to - from;\n        let avg = getAverage(duration)\n        let start_date = '&sdate=' + getPRTGDate(from)\n        let end_date = '&edate=' + getPRTGDate(to)\n\n        const params = `id=${target.sensor_id}&avg=${avg}${start_date}${end_date}&usecaption=true`\n        const cache_key = `historicdata.json&id=${target.sensor_id}&avg=${avg}&${target.channel_name}`\n\n        if (this.cache[cache_key] && refresh_time < this.cache[cache_key].timestamp) {\n          dates_array = this.cache[cache_key]['dates_array']\n          results_array = this.cache[cache_key]['results_array']\n        } else {\n          // const response = await this.request('historicdata.json', params);\n          const response = await this.directRequest('historicdata.json', params);\n          const data = await response.json()\n\n          if ((data.histdata).length > 0) {\n            let channel_name = target.channel_name\n            if (channel_name.includes('Traffic')) {\n              channel_name = channel_name + ' (Speed)'\n            }\n            data.histdata.forEach(function(x:any) {\n              // To combat issue with keys being padded with space.\n              for (const key in x) {\n                if (x.hasOwnProperty(key)) {\n                  if (key.trim() === channel_name) {\n                    results_array.push(x[key]);\n                    dates_array.push(convertPRTGDateTimeToISO(x.datetime));\n                  }\n                }\n              }\n            })\n          }\n          this.cache[cache_key] = {'results_array': results_array, 'dates_array': dates_array, 'timestamp': Date.now()}\n        }\n\n        return new MutableDataFrame({\n          refId: target.refId,\n          fields: [\n            { name: 'Time', values: dates_array, type: FieldType.time },\n            { name: target.channel_name, values: results_array, type: FieldType.number },\n          ],\n        });\n      } else if (target.chart_type === 'Stat' && target.query_mode === 'Text')  {\n        const params = `id=${target.sensor_id}`\n        const cache_key = params + `?filter_property=${target.filter_property}`\n        let last_value = 'N/a'\n\n        if (this.cache[cache_key] && refresh_time < this.cache[cache_key].timestamp) {\n          last_value = this.cache[cache_key]['last_value']\n          datetime = this.cache[cache_key]['datetime']\n        } else {\n          // const response = await this.request('getsensordetails.json', params);\n          const response = await this.directRequest('getsensordetails.json', params);\n          const data = await response.json()\n          last_value = data.sensordata[SENSOR_DATA_MAPPINGS[target.filter_property]]\n          this.cache[cache_key] = {'last_value': last_value, 'datetime': datetime, 'timestamp': Date.now()}\n        }\n\n        return new MutableDataFrame({\n          refId: target.refId,\n          fields: [\n            { name: 'Time', values: [datetime], type: FieldType.time },\n            { name: 'Message', values: [last_value], type: FieldType.string },\n          ],\n        });\n      } else {\n        let converted_value = 'NaN'\n        const params = `content=channels&columns=name,datetime,lastvalue_&id=${target.sensor_id}`\n        const cache_key = params + `?channel=${target.channel_name}`\n\n        // In cache && within timeout. \n        if (this.cache[cache_key] && refresh_time < this.cache[cache_key].timestamp) {\n          converted_value = this.cache[cache_key]['converted_value']\n          datetime = this.cache[cache_key]['datetime']\n        } else {\n          try {\n            // const response = await this.request('table.json', params);\n            const response = await this.directRequest('table.json', params);\n            const data = await response.json()\n            if ((data.channels).length > 0) {\n              const channel = data.channels.find(ob=>(ob.name === target.channel_name))\n              converted_value = channel.lastvalue_raw\n              datetime = convertPRTGDateTimeToISO(channel.datetime)\n              this.cache[cache_key] = {'converted_value': converted_value, 'datetime': datetime, 'timestamp': Date.now()}\n            }\n          } catch {\n            if (this.cache[cache_key]) {\n              converted_value = this.cache[cache_key]['converted_value']\n              datetime = this.cache[cache_key]['datetime']\n              error_message = error_message + `Using cached values: ${converted_value}`\n            } else {\n              error_message = error_message + 'No cached value, please refresh.'\n            }\n            console.log(error_message)\n          }\n        }  \n        return new MutableDataFrame({\n          refId: target.refId,\n          fields: [\n            { name: 'Time', values: [datetime], type: FieldType.time },\n            { name: target.channel_name, values: [converted_value], type: FieldType.number },\n          ],\n        });\n      }\n\n    });\n\n    return Promise.all(promises).then((data) => ({ data }));\n\n  }\n\n  async request(route_path: string, params?: string) {\n    const response = getBackendSrv().fetch<DataQueryResponse>({\n      url: `${this.base_url}${route_path}${params?.length ? `?${params}` : '?'}&apitoken=${this.api_token}`,\n    });\n    return lastValueFrom(response);\n  }\n\n  // async directRequest(route_path: string, params?: string) {\n  //   const response = await fetch(`${this.base_url}${route_path}${params?.length ? `?${params}` : '?'}&apitoken=${this.api_token}`);\n  //   if (!response.ok) {\n  //     throw new Error(`HTTP Error! Status: ${response.statusText}`);\n  //   }\n  //   return await response;\n  // }\n\n  async directRequest(route_path: string, params?: string) {\n    const response = from(\n      fetch(`${this.base_url}${route_path}${params?.length ? `?${params}` : '?'}&apitoken=${this.api_token}`)\n    );\n    return lastValueFrom(response);\n  }\n\n  async testDatasource() {\n    // Implement a health check for your data source.\n    const default_error = 'Cannot connect to API';\n\n    try {\n      const response = await this.directRequest('status.json', '')\n      if (response.status === 200) {\n        const data = await response.json()\n        return {\n          status: 'success',\n          message: 'Success. Version: ' + data.Version + ' returned from PTRG.',\n        };\n      } else {\n        return {\n          status: 'error',\n          message: response.statusText ? response.statusText : default_error,\n        };\n      }\n    } catch (err) {\n      let message = '';\n      if (_.isString(err)) {\n        message = err;\n      } else if (isFetchError(err)) {\n        message = 'Fetch error: ' + (err.statusText ? err.statusText : default_error);\n        if (err.data && err.data.error && err.data.error.code) {\n          message += ': ' + err.data.error.code + '. ' + err.data.error.message;\n        }\n      }\n      return {\n        status: 'error',\n        message,\n      };\n    }\n  }\n\n  // async testDatasource() {\n  //   // Implement a health check for your data source.\n  //   const default_error = 'Cannot connect to API';\n\n  //   try {\n  //     const response = await this.request('status.json', '');\n  //     if (response.status === 200) {\n  //       return {\n  //         status: 'success',\n  //         message: 'Success. Version: ' + response.data.Version + ' returned from PTRG.',\n  //       };\n  //     } else {\n  //       return {\n  //         status: 'error',\n  //         message: response.statusText ? response.statusText : default_error,\n  //       };\n  //     }\n  //   } catch (err) {\n  //     let message = '';\n  //     if (_.isString(err)) {\n  //       message = err;\n  //     } else if (isFetchError(err)) {\n  //       message = 'Fetch error: ' + (err.statusText ? err.statusText : default_error);\n  //       if (err.data && err.data.error && err.data.error.code) {\n  //         message += ': ' + err.data.error.code + '. ' + err.data.error.message;\n  //       }\n  //     }\n  //     return {\n  //       status: 'error',\n  //       message,\n  //     };\n  //   }\n  // }\n\n}\n","import React, { ChangeEvent, useState, useEffect, useRef } from 'react';\nimport { InlineField, Input } from '@grafana/ui';\nimport { QueryEditorProps } from '@grafana/data';\nimport { DataSource } from '../datasource';\nimport { MyDataSourceOptions, MyQuery } from '../types';\nimport Switch from '@mui/joy/Switch';\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\n// Query mode\nconst queryModeOptions = ['Metrics', 'Text', 'Raw']\n\n// These are the bare minimum options for allowing a sensor message to be displayed. To be expanded in future.\n// const filterProperties = ['', 'Tags', 'Active', 'Status', 'Status (Raw)', 'Message', 'Priority']\nconst filterProperties = ['Message', 'Status', 'Status (Raw)']\n// const valueFromOptions = ['Group', 'Device', 'Sensor']\nconst valueFromOptions = ['Sensor']\n\nexport function QueryEditor({ query, datasource, onChange, onRunQuery }: Props) {\n\n  const base_url = datasource.base_url\n  const api_token = \"&apitoken=\" + datasource.api_token\n\n  const [queryMode, setQueryMode] = useState(query.query_mode || queryModeOptions[0])\n  \n  const [group, setGroup] = useState(query.group_name || '*')\n  const [device, setDevice] = useState(query.device_name || '*')\n  const [sensor, setSensor] = useState(query.sensor_id || 0)\n  const [channel, setChannel] = useState(query.channel_name || '*')\n\n  const [filterProperty, setFilterProperty] = useState(query.filter_property || filterProperties[0])\n  const [valueFrom, setValueFrom] = useState(valueFromOptions[0])\n  // const [sensorName, setSensorName] = useState(false)\n  // const [deviceName, setDeviceName] = useState(false)\n  // const [channelFiler, setChannelFiler] = useState(false)\n\n  let visSelector = (document.querySelector('[aria-label=\"Change Visualization\"]') as HTMLInputElement | null);\n  let visualization = visSelector.children[1].innerHTML\n\n  const styles = {\n    switch: {\n      paddingLeft: '20px',\n      paddingRight: '30px',\n    },\n    fillPadding: {\n      marginLeft: '15px',\n    },\n    calcButton: {\n      padding: '0px 15px',\n      margin: '0px 15px 4px 15px',\n      borderRadius: '7px',\n      color: '#FFF',\n      border: 'none',\n      backgroundColor: '#3781DC',\n    }\n  };\n\n  const [groupList, setGroupList] = useState(['']);\n  const [groupLoading, setGroupLoading] = useState(true);\n\n  useEffect(() => {\n    fetch(base_url + 'table.json?content=groups&count=9999&columns=objid,group,probe,tags,active,status,message,priority' + api_token)\n      .then(response => response.json())\n      .then((data) => {\n        if (data.treesize > 0) {\n          let uniqueGroups = Array.from(new Set(data.groups.map((x) => x.group).sort()))\n          uniqueGroups.unshift('*')\n          setGroupList(uniqueGroups);\n        } else {\n          console.log('No Groups.')\n        }\n        setGroupLoading(false);\n      })\n      .catch((e) => {\n        console.error(`An error occurred: ${e}`)\n      });\n  }, []);\n\n  const [deviceList, setDeviceList] = useState(['']);\n  const [deviceLoading, setDeviceLoading] = useState(true);\n\n  useEffect(() => {\n    let device_url = base_url + \"table.json?content=devices&count=9999&columns=objid,device,group,probe,tags,active,status,message,priority\" + api_token\n    if (group !== '*') {\n      device_url += '&filter_group=' + group\n    }\n\n    fetch(device_url)\n      .then(response => response.json())\n      .then((data) => {\n        if (data.treesize > 0) {\n          let uniqueDevices = Array.from(new Set(data.devices.map((x) => x.device).sort()))\n          uniqueDevices.unshift('*')\n          setDeviceList(uniqueDevices);\n        } else if (group !== '*') {\n          setDeviceList(['*']);\n          console.log('No devices for that group.')\n        } else {\n          console.log('No Devices.')\n        }\n        setDeviceLoading(false);\n      })\n      .catch((e) => {\n        console.error(`An error occurred: ${e}`)\n      });\n  }, [group]);\n\n  const [sensorList, setSensorList] = useState(['']);\n  const [sensorLoading, setSensorLoading] = useState(true);\n\n  useEffect(() => {\n    let sensor_url = base_url + \"table.json?content=sensors&count=9999&columns=objid,sensor,device,group,probe,tags,active,status,message,priority\" + api_token\n    if (device !== '*') {\n      sensor_url += '&filter_device=' + device\n    }\n\n    fetch(sensor_url)\n      .then(response => response.json())\n      .then((data) => {\n        if (data.treesize > 0) {\n          let sensorHash = []\n          data.sensors.forEach(function(x:any) {\n            let singleObj: any = {};\n            singleObj['id'] = x.objid;\n            singleObj['name'] = x.sensor;\n            sensorHash.push(singleObj);\n          });\n          sensorHash.unshift({ id: 0, name: '*'})\n          setSensorList(sensorHash);\n        } else if (device !== '*') {\n          setSensorList([{ id: 0, name: '*'}]);\n          console.log('No sensors for that device.')\n        } else {\n          console.log('No Sensors.')\n        }\n        setSensorLoading(false);\n      })\n      .catch((e) => {\n        console.error(`An error occurred: ${e}`)\n      });\n  }, [device]);\n\n  const onSensorChange = (event: ChangeEvent<HTMLInputElement>) => {\n    let sensorId = event.target.value\n    setSensor(sensorId)\n    if ( queryMode === 'Text' && visualization == 'Stat') {\n      getSensorDetail(sensorId, filterProperty)\n    } else {\n      console.log('No sensor details required.')\n    }\n  };\n\n  const [channelList, setChannelList] = useState(['']);\n  const [channelLoading, setChannelLoading] = useState(true);\n\n  useEffect(() => {\n    let channel_url = base_url + \"table.json?content=channels&output=json&columns=name,datetime,lastvalue_&id=\" \n    if (sensor !== 0) {\n      channel_url += sensor + \"&noraw=1&usecaption=true\" + api_token\n    } else {\n      channel_url += \"0&noraw=1&usecaption=true\" + api_token\n    }\n\n    fetch(channel_url)\n      .then(response => response.json())\n      .then((data) => {\n        if ((data.channels).length > 0) {\n          let channelHash = []\n          data.channels.forEach(function(x:any) {\n            let singleObj: any = {};\n            singleObj['name'] = x.name;\n            singleObj['last_value'] = x.lastvalue;\n            channelHash.push(singleObj);\n          });\n          channelHash.unshift({ name: '*'})\n          setChannelList(channelHash);\n        } else if (sensor !== 0) {\n          setChannelList([{ name: '*'}]);\n          console.log('No channels for that sensor.')\n        } else {\n          console.log('No Channels.')\n        }\n        setChannelLoading(false);\n      })\n      .catch((e) => {\n        console.error(`An error occurred: ${e}`)\n      });\n  }, [sensor]);\n\n  const onChannelChange = (event: ChangeEvent<HTMLInputElement>) => {\n    let channelName = event.target.value\n    setChannel(channelName)\n\n    onChange({ ...query, query_mode: queryMode, chart_type: visualization, group_name: group, device_name: device, sensor_id: parseInt(sensor), \n                  channel_name: channelName });\n    onRunQuery();\n  };\n\n  const onFilterPropertyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    let filterProp = event.target.value \n    setFilterProperty(filterProp)\n\n    if ( queryMode === 'Text' && visualization == 'Stat' && sensor !== 0) {\n      getSensorDetail(sensor, filterProp)\n    } else {\n      console.log('No Get call for sensor')\n    }\n  };\n\n  let refreshButton = (document.querySelector('[aria-label=\"Refresh dashboard\"]') as HTMLInputElement | null);\n  \n  refreshButton.addEventListener(\"click\", (event) => {\n    onChange({ ...query, query_mode: queryMode, chart_type: visualization, group_name: group, device_name: device, sensor_id: parseInt(sensor), \n                  channel_name: channel });\n    onRunQuery();\n  });\n\n  function getSensorDetail(sensor, filterProperty) {\n    onChange({ ...query, query_mode: queryMode, chart_type: visualization, group_name: group, device_name: device, sensor_id: sensor, \n                      channel_name: '*', filter_property: filterProperty });\n    onRunQuery();\n  }\n\n  return (\n    <div>\n      <div className='gf-form-inline'>\n        <div className=\"gf-form max-width-20\">\n          <div className=\"gf-form-label width-7\">Query Mode</div>\n          { ( true ) ?\n              <select value={queryMode} onChange={(event) => setQueryMode(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"string\">\n                <option value='Metrics' className=\"gf-form-input\" >Metrics</option>\n                <option value='Text' className=\"gf-form-input\" >Text</option>\n                <option value='Raw' className=\"gf-form-input\" disabled='true' >Raw</option>\n              </select>\n            :\n            <select value={queryMode} onChange={(event) => setQueryMode(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"string\">\n              {queryModeOptions.map((queryModeoption) => (\n                <option value={queryModeoption} className=\"gf-form-input\">{queryModeoption}</option>\n              ))}\n            </select>\n          }\n        </div>          \n        <div className=\"gf-form gf-form--grow\" style={styles.fillPadding}>\n          <div className=\"gf-form-label gf-form-label--grow\"></div>\n        </div>\n      </div>\n      { queryMode !== 'Raw' ?\n        <div className='gf-form-inline'>\n          <div className=\"gf-form max-width-20\">\n            <div htmlLabel=\"Group\" className=\"gf-form-label query-keyword width-7\">Group</div>\n            { groupLoading ? \n              <Input type='text' disabled={true} placeholder=' Loading groups...' /> :\n              /* <Input value={group} onChange={(event) => setGroup(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"text\">\n              </Input>*/\n              <select value={group} onChange={(event) => setGroup(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"string\">\n                {groupList.map((groupOption) => (\n                  <option value={groupOption} className=\"gf-form-input\">{groupOption}</option>\n                ))}\n              </select>\n            }\n          </div>\n          <div className=\"gf-form max-width-20\">\n            <div htmlLabel=\"Host\" className=\"gf-form-label query-keyword width-7\" style={styles.fillPadding}>Host</div>\n            { deviceLoading ? \n              <Input type='text' disabled={true} placeholder=' Loading hosts...' /> :\n              /*<Input value={host} onChange={(event) => setHost(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"text\">\n              </Input> */\n              <select value={device} onChange={(event) => setDevice(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"string\">\n                {deviceList.map((deviceOption) => (\n                  <option value={deviceOption} className=\"gf-form-input\">{deviceOption}</option>\n                ))}\n              </select>\n            }\n          </div>\n        </div>\n        :\n        <div className='gf-form-inline'>\n          <div className=\"gf-form max-width-30\">\n            <div className=\"gf-form-label query-keyword width-7\">URI</div>\n            {/* <Input placeholder=\"getstatus.htm\" className='gf-form-select-wrapper max-width-25' type=\"text\"></Input>*/}\n            <Input type='text' disabled={true} placeholder='To be developed...' className='gf-form-wrapper max-width-25'/>\n          </div>\n          <div className=\"gf-form max-width-30\">\n            <div className=\"gf-form-label query-keyword width-10\">Query String</div>\n            {/* <Input placeholder=\"id=0&tabid=1\" className='gf-form-select-wrapper max-width-30' type=\"text\"></Input>*/}\n            <Input type='text' disabled={true} placeholder='To be developed...' className='gf-form-wrapper max-width-25'/>\n\n          </div>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>\n        </div>\n      }\n\n      { queryMode !== 'Raw' ?\n        <div className='gf-form-inline'>\n          <div className=\"gf-form max-width-30\">\n            <div htmlLabel=\"Sensor\" className=\"gf-form-label query-keyword width-7\">Sensor</div>\n            { sensorLoading ? \n              <Input type='text' disabled={true} placeholder=' Loading sensors...' /> :\n              /*<Input value={sensor} onChange={(event) => setSensor(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"text\">\n              </Input>*/\n              <select value={sensor} onChange={onSensorChange} className='gf-form-select-wrapper max-width-30 sensorValue' type=\"string\">\n                {sensorList.map((sensorOption) => (\n                  <option value={sensorOption.id} className=\"gf-form-input\">{sensorOption.name}</option>\n                ))}\n              </select>\n            }\n          </div>\n          { queryMode !== 'Text' ? \n            <div className=\"gf-form max-width-30\">\n              <div htmlLabel=\"Channel\" className=\"gf-form-label query-keyword width-7\" style={styles.fillPadding}>Channel</div>\n              { sensor !== 0 ? \n                //   <Input value={channel} onChange={(event) => setChannel(event.target.value)} className='gf-form-select-wrapper max-width-20' type=\"text\">\n                //   </Input>\n                <select value={channel} onChange={onChannelChange} className='gf-form-select-wrapper max-width-30' type=\"string\">\n                  {channelList.map((channelOption) => (\n                    <option value={channelOption.name} className=\"gf-form-input\">{channelOption.name}</option>\n                  ))}\n                </select> \n                :\n                <Input type='text' disabled={true} \n                  placeholder={ channelLoading ? ' Loading channels...' : ' Sensor must be selected first.' }\n                />\n              }\n            </div>\n            : ''\n          }\n          {/*<InlineField label=\"Query Text\" labelWidth={16} tooltip=\"Not used yet\">\n            <Input onChange={onQueryTextChange} value={queryText || ''} />\n          </InlineField>\n\n          <InlineField label=\"Frequency\" labelWidth={16}>\n            <Input onChange={onFrequencyChange} value={constant || ''} />\n          </InlineField>*/}\n        </div>\n        : ''\n      }\n\n      { queryMode === 'Text' ?\n        // This is an unnecessary if statement once more options are added.\n        <div className='gf-form-inline'>\n          <div className=\"gf-form max-width-40\">\n            <div className=\"gf-form-label query-keyword width-7\">Options</div>\n          </div>\n          { queryMode === 'Text' ?\n            <div className=\"gf-form max-width-20\">\n              <div className=\"gf-form-label width-10\">Value From</div>\n                <select value={valueFrom} onChange={(event) => setValueFrom(event.target.value)} className='gf-form-select-wrapper '>\n                  {valueFromOptions.map((valueFromOption) => (\n                    <option value={valueFromOption} className=\"gf-form-input\">{valueFromOption}</option>\n                  ))}\n                </select>\n            </div>\n            : ''\n          }\n          { queryMode === 'Text' ? \n            // Change to queryMode !== 'Raw' when further development of options is being done.\n            <div className=\"gf-form max-width-20\">\n              <div className=\"gf-form-label width-10\">Filter Property</div>\n                <select value={filterProperty} onChange={onFilterPropertyChange} className='gf-form-select-wrapper '>\n                  {filterProperties.map((filterPropertyOption) => (\n                    <option value={filterPropertyOption} className=\"gf-form-input\">{filterPropertyOption}</option>\n                  ))}\n                </select>\n            </div>\n            : ''\n          }\n  {/*        { queryMode === 'Text' ?\n            <div className=\"gf-form gf-form--grow\">\n              <div className=\"gf-form-label gf-form-label--grow\"></div>\n            </div>\n            :''\n          }\n          <div className=\"gf-form max-width-30\">\n            <div className=\"gf-form-label width-10\">Text Filter</div>\n            <Input placeholder=\"Text filter (regex)\" className='gf-form-select-wrapper max-width-20' type=\"text\">\n            </Input>\n          </div>\n          <div className=\"gf-form gf-form--grow\">\n            <div className=\"gf-form-label gf-form-label--grow\"></div>\n          </div>*/}\n        </div>\n        : ''\n      }\n{/*      { queryMode === 'Metrics' ?\n        <div className='gf-form-inline'>\n          <div className=\"gf-form max-width-40\">\n            <div className=\"gf-form-label query-keyword width-7\"></div>\n          </div>\n          <div className=\"gf-form max-width-16\">\n            <div className=\"gf-form-label width-10\">Include Sensor Name</div>\n            <Switch style={styles.switch} checked={sensorName} onChange={(event) => setSensorName(sensorName => !sensorName)} \n            sx={{\"--Switch-trackWidth\": \"50px\"}}/>\n          </div>\n          <div className=\"gf-form max-width-16\">\n            <div className=\"gf-form-label width-10\">Include Device Name</div>\n            <Switch style={styles.switch} checked={deviceName} onChange={(event) => setDeviceName(deviceName => !deviceName)}\n            sx={{\"--Switch-trackWidth\": \"50px\"}}/>\n          </div>\n          <div className=\"gf-form max-width-16\">\n            <div className=\"gf-form-label width-10\">Invert Channel Filter</div>\n            <Switch style={styles.switch} checked={channelFiler} onChange={(event) => setChannelFiler(channelFiler => !channelFiler)}\n            sx={{\"--Switch-trackWidth\": \"50px\"}}/>\n          </div>\n        </div>\n        : ''\n      }*/}\n    </div>\n  );\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { DataSource } from './datasource';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import React, { ChangeEvent, useState } from 'react';\nimport { InlineField, Input, SecretInput } from '@grafana/ui';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { MyDataSourceOptions, MySecureJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> {}\n\nexport function ConfigEditor(props: Props) {\n  const { onOptionsChange, options } = props;\n  const [cache, setCache] = useState(options.jsonData.cache || '')\n  const [error, setError] = useState('')\n\n  const onPathChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      path: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  const onCacheChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const cache_timeout = parseInt(event.target.value, 10);\n    \n    if (cache_timeout > 0 && cache_timeout <= 1440) {\n      const jsonData = {\n        ...options.jsonData,\n        cache: cache_timeout,\n      };\n      setCache(cache_timeout)\n      setError('')\n      onOptionsChange({ ...options, jsonData });\n    } else {\n      const jsonData = {\n        ...options.jsonData,\n        cache: 5\n      };\n      setCache('')\n      onOptionsChange({ ...options, jsonData });\n      setError('Cache timeout should be a number between 1 and 1440. It will default to 5 if not set.')\n    }\n  };\n\n  const onApiTokenChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const jsonData = {\n      ...options.jsonData,\n      api_token: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  // Secure field (only sent to the backend)\n  // const onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n  //   onOptionsChange({\n  //     ...options,\n  //     secureJsonData: {\n  //       apiKey: event.target.value,\n  //     },\n  //   });\n  // };\n\n  // const onResetAPIKey = () => {\n  //   onOptionsChange({\n  //     ...options,\n  //     secureJsonFields: {\n  //       ...options.secureJsonFields,\n  //       apiKey: false,\n  //     },\n  //     secureJsonData: {\n  //       ...options.secureJsonData,\n  //       apiKey: '',\n  //     },\n  //   });\n  // };\n\n  const styles = {\n    error: {\n      paddingLeft: '165px',\n      paddingTop: '8px',\n      fontSize: '10px', \n      color: 'red'\n    },\n  };\n\n  const { jsonData, secureJsonFields } = options;\n  // const secureJsonData = (options.secureJsonData || {}) as MySecureJsonData;\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField label=\"Path\" labelWidth={20}>\n        <Input\n          onChange={onPathChange}\n          value={jsonData.path || ''}\n          placeholder=\"json field returned to frontend\"\n          width={40}\n        />\n      </InlineField>\n{/*      <InlineField label=\"API Key\" labelWidth={20}>\n        <SecretInput\n          isConfigured={(secureJsonFields && secureJsonFields.apiKey) as boolean}\n          value={secureJsonData.apiKey || ''}\n          placeholder=\"secure json field (backend only)\"\n          width={40}\n          onReset={onResetAPIKey}\n          onChange={onAPIKeyChange}\n        />\n      </InlineField>*/}\n      <InlineField label=\"API Token\" labelWidth={20}>\n        <SecretInput\n          value={jsonData.api_token || ''}\n          placeholder=\"api token\"\n          width={40}\n          onChange={onApiTokenChange}\n        />\n      </InlineField>\n      <InlineField label=\"Cache timeout\" labelWidth={20}>\n        <Input\n          onKeyPress={e => { e.key === 'Enter' && e.preventDefault(); }}\n          onChange={onCacheChange}\n          value={cache}\n          placeholder=\"Timeout in minutes\"\n          width={40}\n        />\n      </InlineField>\n      <div>\n        <p style={styles.error} id=\"age-error\">{error}</p>\n      </div>\n    </div>\n  );\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","SENSOR_DATA_MAPPINGS","pad","idx","val","slice","convertPRTGDateTimeToISO","date_string","full_date","time","split","date","month","year","hour","minute","second","getPRTGDate","unixtime","dt","Date","getFullYear","utils","getMonth","getDate","getHours","getMinutes","getSeconds","join","DataSource","DataSourceApi","query","options","promises","targets","map","target","datetime","toISOString","refresh_time","cache_timeout","now","error_message","chart_type","MutableDataFrame","refId","fields","name","values","type","FieldType","number","dates_array","results_array","range","from","valueOf","to","avg","duration","hours","getAverage","start_date","end_date","params","sensor_id","cache_key","channel_name","cache","timestamp","response","directRequest","data","json","histdata","length","includes","forEach","x","trim","push","query_mode","filter_property","last_value","sensordata","string","converted_value","channels","channel","find","ob","lastvalue_raw","console","log","Promise","all","then","request","route_path","getBackendSrv","fetch","url","base_url","api_token","lastValueFrom","testDatasource","default_error","status","message","Version","statusText","err","_","isFetchError","error","code","constructor","instanceSettings","super","this","jsonData","path","queryModeOptions","filterProperties","valueFromOptions","plugin","DataSourcePlugin","setConfigEditor","props","onOptionsChange","setCache","useState","setError","secureJsonFields","div","className","InlineField","label","labelWidth","Input","onChange","event","placeholder","width","SecretInput","onKeyPress","e","preventDefault","parseInt","p","style","paddingLeft","paddingTop","fontSize","color","id","setQueryEditor","datasource","onRunQuery","queryMode","setQueryMode","group","setGroup","group_name","device","setDevice","device_name","sensor","setSensor","setChannel","filterProperty","setFilterProperty","valueFrom","setValueFrom","visualization","document","querySelector","children","innerHTML","styles","switch","paddingRight","fillPadding","marginLeft","calcButton","padding","margin","borderRadius","border","backgroundColor","groupList","setGroupList","groupLoading","setGroupLoading","useEffect","treesize","uniqueGroups","Array","Set","groups","sort","unshift","catch","deviceList","setDeviceList","deviceLoading","setDeviceLoading","device_url","uniqueDevices","devices","sensorList","setSensorList","sensorLoading","setSensorLoading","sensor_url","sensorHash","sensors","singleObj","objid","channelList","setChannelList","channelLoading","setChannelLoading","getSensorDetail","channel_url","channelHash","lastvalue","addEventListener","select","option","disabled","htmlLabel","groupOption","deviceOption","sensorId","sensorOption","channelName","channelOption","valueFromOption","filterProp","filterPropertyOption"],"sourceRoot":""}